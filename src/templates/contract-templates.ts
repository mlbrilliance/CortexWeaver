import * as fs from 'fs';
import * as path from 'path';
import { ApiTemplates } from './api-templates';
import { SchemaTemplates } from './schema-templates';

/**
 * ContractTemplates handles the creation of formal contract directories and structure
 */
export class ContractTemplates {
  
  static async createContractsDirectory(projectRoot: string): Promise<void> {
    const contractsPath = path.join(projectRoot, 'contracts');
    
    // Create main contracts directory structure
    const contractDirs = [
      contractsPath,
      path.join(contractsPath, 'api'),
      path.join(contractsPath, 'schemas'),
      path.join(contractsPath, 'schemas', 'models'),
      path.join(contractsPath, 'schemas', 'properties'),
      path.join(contractsPath, 'schemas', 'properties', 'invariants'),
      path.join(contractsPath, 'examples')
    ];

    contractDirs.forEach(dir => {
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
    });

    // Create templates in the appropriate directories
    await ApiTemplates.createOpenApiTemplate(path.join(contractsPath, 'api'));
    await SchemaTemplates.createJsonSchemaTemplates(path.join(contractsPath, 'schemas'));
    
    // Create contracts README
    const contractsReadmePath = path.join(contractsPath, 'README.md');
    if (!fs.existsSync(contractsReadmePath)) {
      const contractsReadmeContent = `# CortexWeaver Contracts

This directory contains formal specifications that define the behavior of your application. These contracts serve as the source of truth for all AI agents in the CortexWeaver ecosystem.

## Directory Structure

\`\`\`
contracts/
├── README.md                 # This file
├── api/                      # OpenAPI specifications
│   └── openapi.yaml         # Main API specification
├── schemas/                  # JSON Schema definitions
│   ├── models/              # Data model schemas
│   │   └── user.schema.json # Example user schema
│   ├── properties/          # Property-based test definitions
│   │   └── invariants/      # Behavioral invariants
│   │       └── auth.properties.ts
│   └── examples/            # Example data for testing
│       └── user-examples.json
\`\`\`

## Specification-Driven Development (SDD)

CortexWeaver follows SDD principles where:

1. **Contracts come first** - Define behavior before implementation
2. **Agents verify compliance** - Multiple AI agents validate against contracts
3. **Tests derive from contracts** - Property-based tests ensure invariants
4. **Implementation follows contracts** - Code must satisfy specifications

## Contract Types

### OpenAPI Specifications (\`/api/\`)
- Define REST API endpoints, request/response schemas
- Specify authentication, error handling, status codes
- Document all public interfaces

### JSON Schemas (\`/schemas/models/\`)
- Define data structures and validation rules
- Specify required fields, types, constraints
- Enable automatic validation and documentation

### Property Invariants (\`/schemas/properties/\`)
- Define behavioral contracts and business rules
- Specify system invariants that must always hold
- Enable property-based testing and verification

### Examples (\`/examples/\`)
- Provide sample data for testing and documentation
- Include both valid and invalid examples
- Support automated testing and validation

## Agent Integration

CortexWeaver agents use these contracts as follows:

- **Architect Agent**: Designs system based on contract specifications
- **Coder Agent**: Implements code that satisfies contracts
- **Property Tester**: Verifies implementation against invariants
- **Quality Gatekeeper**: Ensures contract compliance
- **Formalizer**: Converts requirements into formal contracts

## Best Practices

1. **Keep contracts updated** - Sync with implementation changes
2. **Use examples extensively** - Provide comprehensive test data
3. **Define clear invariants** - Specify what must always be true
4. **Version your contracts** - Track changes over time
5. **Validate early and often** - Test against contracts continuously

---

*Generated by CortexWeaver CLI*`;

      fs.writeFileSync(contractsReadmePath, contractsReadmeContent);
    }
  }
}
